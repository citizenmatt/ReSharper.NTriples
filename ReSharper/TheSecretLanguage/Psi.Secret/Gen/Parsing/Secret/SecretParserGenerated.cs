//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI;
using JetBrains.ReSharper.Psi.Secret.Tree.Impl;
namespace JetBrains.ReSharper.Psi.Secret.Parsing {
  internal abstract class SecretParserGenerated : JetBrains.ReSharper.Psi.Parsing.GeneratedParserBase<JetBrains.ReSharper.Psi.Parsing.ILexer<int>> 
  {
    public SecretParserGenerated() {}
    protected ParsingContext myCurrentContext = ParsingContext.UNDEFINED;
    protected enum ParsingContext : short {
      UNDEFINED
    }
    protected class ParsingContextAttribute : System.Attribute {
      private ParsingContext myParsingContext;
      public ParsingContextAttribute (ParsingContext context) {
        myParsingContext = context;
      }
      public ParsingContext ParsingContext {
        get {
          return myParsingContext;
        }
      }
    }
    protected bool IsInFollow (JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) {
      switch (myCurrentContext) {
        case ParsingContext.UNDEFINED: return false;
        default:
        throw new System.InvalidOperationException("Unknown context");
        return false;
      }
    }
    protected virtual TreeElement match(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType) {
      if (myLexer.TokenType != tokenType) {
        var tokenRepr = tokenType.TokenRepresentation;
        if (string.IsNullOrEmpty(tokenRepr))
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (JetBrains.ReSharper.Psi.Secret.Parsing.ParserMessages.GetExpectedMessage(tokenType.ToString()));
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken (JetBrains.ReSharper.Psi.Secret.Parsing.ParserMessages.GetExpectedMessage(tokenRepr));
      }
      return createToken();
    }
    protected void skip(CompositeElement parent) {
      parent.AppendNewChild (createToken());
    }
  }
}
