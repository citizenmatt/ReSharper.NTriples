//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using System.IO;
using JetBrains.ReSharper.Psi.Parsing;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
namespace JetBrains.ReSharper.Psi.Secret.Tree.Impl
{
  public partial class PsiGeneratedGetterTestUtil : PsiGetterTestUtil
  {
      internal static void TestSecretFile (int level, JetBrains.ReSharper.Psi.Secret.Tree.ISecretFile param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestAnonymousIdentifier (int level, JetBrains.ReSharper.Psi.Secret.Tree.IAnonymousIdentifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestAxisDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IAxisDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestCutStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.ICutStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestDataLiteral (int level, JetBrains.ReSharper.Psi.Secret.Tree.IDataLiteral param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestExpression (int level, JetBrains.ReSharper.Psi.Secret.Tree.IExpression param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestExtensionDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IExtensionDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFact (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFact param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFacts (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFacts param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFacts_ (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFacts_ param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestForAllDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IForAllDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestForSomeDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IForSomeDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFormula (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFormula param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFormulaContent (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFormulaContent param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFormula_ (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFormula_ param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFromStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFromStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFunctorStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFunctorStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestIdentifier (int level, JetBrains.ReSharper.Psi.Secret.Tree.IIdentifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestIfStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.IIfStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestKeywordStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.IKeywordStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestList (int level, JetBrains.ReSharper.Psi.Secret.Tree.IList param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestLiteral (int level, JetBrains.ReSharper.Psi.Secret.Tree.ILiteral param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestLiteral_keywords (int level, JetBrains.ReSharper.Psi.Secret.Tree.ILiteral_keywords param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestMeta (int level, JetBrains.ReSharper.Psi.Secret.Tree.IMeta param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestMetas (int level, JetBrains.ReSharper.Psi.Secret.Tree.IMetas param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestNotStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.INotStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestObjects (int level, JetBrains.ReSharper.Psi.Secret.Tree.IObjects param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestOrStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.IOrStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestOrStatement_ (int level, JetBrains.ReSharper.Psi.Secret.Tree.IOrStatement_ param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPredicate (int level, JetBrains.ReSharper.Psi.Secret.Tree.IPredicate param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPrefixDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IPrefixDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestSentence (int level, JetBrains.ReSharper.Psi.Secret.Tree.ISentence param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestSentences (int level, JetBrains.ReSharper.Psi.Secret.Tree.ISentences param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestSmartVar (int level, JetBrains.ReSharper.Psi.Secret.Tree.ISmartVar param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.IStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestStdPrefixDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IStdPrefixDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestStringLiteral (int level, JetBrains.ReSharper.Psi.Secret.Tree.IStringLiteral param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestSubject (int level, JetBrains.ReSharper.Psi.Secret.Tree.ISubject param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestUriIdentifier (int level, JetBrains.ReSharper.Psi.Secret.Tree.IUriIdentifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestUriIdentifiers (int level, JetBrains.ReSharper.Psi.Secret.Tree.IUriIdentifiers param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestUseExternalDirective (int level, JetBrains.ReSharper.Psi.Secret.Tree.IUseExternalDirective param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestVariableIdentifier (int level, JetBrains.ReSharper.Psi.Secret.Tree.IVariableIdentifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestVariables (int level, JetBrains.ReSharper.Psi.Secret.Tree.IVariables param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
    }
}
