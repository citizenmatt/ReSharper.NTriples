//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0168, 0219, 0108, 0414
// ReSharper disable RedundantNameQualifier
using System;
using System.IO;
using JetBrains.ReSharper.Psi.Parsing;
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
namespace JetBrains.ReSharper.Psi.Secret.Tree.Impl
{
  public partial class PsiGeneratedGetterTestUtil : PsiGetterTestUtil
  {
      internal static void TestSecretFile (int level, JetBrains.ReSharper.Psi.Secret.Tree.ISecretFile param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestAnonymousIdentifier (int level, JetBrains.ReSharper.Psi.Secret.Tree.IAnonymousIdentifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestDataLiteral (int level, JetBrains.ReSharper.Psi.Secret.Tree.IDataLiteral param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFact (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFact param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestFacts (int level, JetBrains.ReSharper.Psi.Secret.Tree.IFacts param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestIdentifier (int level, JetBrains.ReSharper.Psi.Secret.Tree.IIdentifier param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestLiteral (int level, JetBrains.ReSharper.Psi.Secret.Tree.ILiteral param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestLiteral_keywords (int level, JetBrains.ReSharper.Psi.Secret.Tree.ILiteral_keywords param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestObject (int level, JetBrains.ReSharper.Psi.Secret.Tree.IObject param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestPredicate (int level, JetBrains.ReSharper.Psi.Secret.Tree.IPredicate param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestStatement (int level, JetBrains.ReSharper.Psi.Secret.Tree.IStatement param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
      internal static void TestStringLiteral (int level, JetBrains.ReSharper.Psi.Secret.Tree.IStringLiteral param, String caller)
    {
      if (!CanVisitFurther(param)) return;
      VisitElement (level, param, caller);
    }
    }
}
