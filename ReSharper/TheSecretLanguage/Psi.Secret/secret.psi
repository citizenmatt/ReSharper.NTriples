options {
    parserPackage="JetBrains.ReSharper.Psi.Secret.Parsing";
    parserClassName="SecretParserGenerated";
    psiInterfacePackageName="JetBrains.ReSharper.Psi.Secret.Tree";
    psiStubsPackageName="JetBrains.ReSharper.Psi.Secret.Tree.Impl";
    psiStubsBaseClass="SecretCompositeElement";
    tokenTypePrefix="";
    parserTargetSubdir="Parsing/Secret";
    psiInterfacesTargetSubdir="Psi/Secret/Tree";
    psiStubsTargetSubdir="Psi/Secret/Tree/Impl";
    elementTypePrefix="";
    visitorClassName="TreeNodeVisitor";
    visitorMethodSuffix="";
    testTargetSubdir="Psi/Test/Secret";
    disableReflection;
    separateHierarchies;
    "treeElementClassFQName"="JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement";
    "compositeElementClassFQName"="SecretCompositeElement";
    "psiElementVisitorClassFQName"="JetBrains.ReSharper.Psi.Secret.Tree.TreeNodeVisitor";
    "tokenTypeClassFQName"="JetBrains.ReSharper.Psi.Secret.Parsing.SecretTokenType";
    "visitMethodPrefix"="Visit";
    "lexerClassName"="JetBrains.ReSharper.Psi.Parsing.ILexer<int>";
    "psiClassesPrefix"="";
    "psiElementClassFQName"="JetBrains.ReSharper.Psi.Secret.Tree.ISecretTreeNode";
    customImplPackage="JetBrains.ReSharper.Psi.Secret.Tree.Impl";
    customInterfacePackage="JetBrains.ReSharper.Psi.Secret.Tree";
    "interfaceNamePrefix"="I";
    "tokenElementClassFQName"="JetBrains.ReSharper.Psi.Tree.ITokenNode";
    "customImplSuffix"="";
    "objectClassFQName"="System.Object";
    tokenBitsetThreshold=4;
    elementTypeBaseClass="JetBrains.ReSharper.Psi.Secret.Tree.SecretCompositeNodeType";
    parserMessagesClass="JetBrains.ReSharper.Psi.Secret.Parsing.ParserMessages";
    generateWorkingPsi;
}

errorhandling SecretFile
options
{
  customInterface;
  stubBase = "SecretFileElement";
}
extras
{
  get { methodName = "Definitions" path = <SecretFile:IMPLEMENTATION_UNIT/implementationUnit:DEFINITION> };
  get { methodName="IdentifierName" path=<FSharpFile:MODULE_NAME/qualifiedIdentifierName:NAME> };
}
 :
    (
		MODULE_KEYWORD<MODULE_KEYWORD, ModuleKeyword>		
		qualifiedIdentifierNameFull{MODULE_NAME, ModuleName} 
    )?
    implementationUnit<IMPLEMENTATION_UNIT, ImplementationUnit>
 ;