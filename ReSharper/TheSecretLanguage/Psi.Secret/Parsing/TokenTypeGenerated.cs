//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by TokenGenerator
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.Text;
using JetBrains.ReSharper.Psi.Parsing;

namespace JetBrains.ReSharper.Psi.Secret.Parsing
{
    public static partial class SecretTokenType
    {
        #region URI_BEGIN
        private class UriBeginNodeType : FixedTokenNodeType
        {
            public UriBeginNodeType(): base ("URI_BEGIN", "<") {}
            public override LeafElementBase Create(IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset)
            {
                return new UriBeginTokenElement(this);
            }
        }
        private class UriBeginTokenElement : FixedTokenElement
        {
            public UriBeginTokenElement(UriBeginNodeType tokenNodeType) : base(tokenNodeType) { }
        }
        public static readonly TokenNodeType URI_BEGIN = new UriBeginNodeType();
        #endregion

        #region URI_STRING
        private class UriStringNodeType : FixedTokenNodeType
        {
            public UriStringNodeType(): base ("URI_STRING", "http://uri.string/path#localName") {}
            public override LeafElementBase Create(IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset)
            {
                return new UriStringTokenElement(this);
            }
        }
        private class UriStringTokenElement : FixedTokenElement
        {
            public UriStringTokenElement(UriStringNodeType tokenNodeType) : base(tokenNodeType) { }
        }
        public static readonly TokenNodeType URI_STRING = new UriStringNodeType();
        #endregion

        #region URI_END
        private class UriEndNodeType : FixedTokenNodeType
        {
            public UriEndNodeType(): base ("URI_END", ">") {}
            public override LeafElementBase Create(IBuffer buffer, TreeOffset startOffset, TreeOffset endOffset)
            {
                return new UriEndTokenElement(this);
            }
        }
        private class UriEndTokenElement : FixedTokenElement
        {
            public UriEndTokenElement(UriEndNodeType tokenNodeType) : base(tokenNodeType) { }
        }
        public static readonly TokenNodeType URI_END = new UriEndNodeType();
        #endregion

    }
}
 
